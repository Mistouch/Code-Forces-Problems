#include<bits/stdc++.h>
using namespace std;

#define fastkor ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)
#define endl '\n'
#define ll long long int

#define dvect vector<int>vect
#define pb(x) push_back(x)
#define vectinL(n) for(ll i=0;i<n;i++){ ll x; cin >> x; vect.push_back(x);}
#define vectin(n) for(int i=0;i<n;i++){ int x; cin >> x; vect.push_back(x);}
#define vectout for(auto v: vect) cout<<v<<" "; cout<<endl;
#define sortkor(x) sort(x.begin(),x.end())
#define reversekor(x) reverse(x.begin(),x.end())

#define mini_pos(a)    ( min_element((a).begin(), (a).end()) - (a).begin())
#define maxi_pos(a)    ( max_element((a).begin(), (a).end()) - (a).begin())

#define F first
#define S second
#define YES cout<<"YES\n"
#define YES1 cout<<"Case "<<case++<<": YES\n"
#define NO cout<<"NO\n"
#define NO1 cout<<"Case "<<case++<<": NO\n"
#define precision(n) fixed<<setprecision(n)
#define testcase ll t; cin >>t; while(t--)
const double err=1e-9;
/// 29 --7 --- 21
int main()
{
    fastkor;
    testcase
    {
        int n;
        cin >> n;
        string s;
        cin >> s;
        string st=s;
        reversekor(st);

        if(st==s)
        {
            cout<<"Yes\n";
            continue;
        }

        string s1="";
        string s2="";
        int mid=n/2;

        for(int i=0; i<mid; i++)
        {
            s1+=s[i];
        }
        if(n%2!=0)
            mid++;
        for(int i=mid; i<n; i++)
        {
            s2+=s[i];
        }
        reversekor(s2);

        //cout<<s1<<" "<<s2<<"\n";

        int f,se;
        bool k=true;

        for(int i=0; i<s1.size(); i++)
        {
            if(s1[i]!=s2[i])
            {
                if(k)
                {
                    f=i;
                    k=false;
                }
                se=i;
            }
        }
        bool p=true;
        for(int i=f; i<=se; i++)
        {
            if(s1[i]==s2[i])
                p=false;
        }
        if(p)
            cout<<"Yes\n";
        else
            cout<<"No\n";

    }

}
